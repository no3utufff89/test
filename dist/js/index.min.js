/******/ (() => { // webpackBootstrap
/******/ 	"use strict";

// UNUSED EXPORTS: acc

;// ./src/js/modules/breadCrumbs.js
const ceateBreads = () => {
  const item = ` <svg class='bread-crumbs__icon'
                                    style="transform: rotate(180deg);"
                                    width="10"
                                    height="12"
                                    viewBox="0 0 3 6"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        fill-rule="evenodd"
                                        clip-rule="evenodd"
                                        d="M0.844697 2.82424L2.25895 1.41L2.61245 1.76349L1.37495 3.001L2.61245 4.2385L2.25895 4.592L0.844697 3.17775C0.797829 3.13086 0.7715 3.06729 0.7715 3.001C0.7715 2.9347 0.797829 2.87113 0.844697 2.82424Z"
                                        fill="currentColor"
                                    />
                                </svg>`;
  return item;
};
;// ./src/js/modules/getPageElements.js
const getPageElements = () => {
  const breadCrumbLinks = [...document.querySelectorAll('.bread-crumbs__link')];
  const breadCrumbElems = [...document.querySelectorAll('.bread-crumbs__item')];
  const characteristicsBtns = [...document.querySelectorAll('.characteristics__btn_pc')];
  const infoItemHeader = [...document.querySelectorAll('.info-item__header')];
  const deliveryItem = [...document.querySelectorAll('.delivery-item')];
  const infoItemContent = [...document.querySelectorAll('.info-item__content')];
  return {
    breadCrumbLinks,
    breadCrumbElems,
    characteristicsBtns,
    infoItemHeader,
    deliveryItem,
    infoItemContent
  };
};
;// ./src/js/index.js


const pageElements = getPageElements();
pageElements.breadCrumbLinks.at(-1).classList.add('bread-crumbs__link_active');
const elemsList = pageElements.breadCrumbElems.slice(1, pageElements.breadCrumbElems.length);
elemsList.forEach(item => item.insertAdjacentHTML('afterbegin', ceateBreads()));
const allTabBtns = pageElements.characteristicsBtns;
const allTabBlocks = [...document.querySelectorAll('.characteristics-details-list')];
allTabBtns.forEach((elem, index) => {
  elem.addEventListener('click', () => {
    for (let i = 0; i < allTabBlocks.length; i += 1) {
      if (index === i) {
        allTabBlocks[i].classList.add('characteristics-details-list_active');
        allTabBtns[i].classList.add('tab-btn_active');
      } else {
        allTabBlocks[i].classList.remove('characteristics-details-list_active');
        allTabBtns[i].classList.remove('tab-btn_active');
      }
    }
  });
});
const acc = () => {
  pageElements.infoItemHeader.forEach((btn, index) => {
    btn.addEventListener('click', () => {
      for (let i = 0; i < pageElements.deliveryItem.length; i += 1) {
        if (index === i) {
          pageElements.infoItemContent[i].style.height = pageElements.deliveryItem[i].classList.contains('info-item_active') ? '' : `${pageElements.infoItemContent[i].scrollHeight}px`;
          pageElements.deliveryItem[i].classList.toggle('info-item_active');
        } else {
          pageElements.deliveryItem[i].classList.remove('info-item_active');
          pageElements.infoItemContent[i].style.height = '';
        }
      }
    });
  });
};
acc();
/******/ })()
;